basePath: /v1
definitions:
  main.PostPayload:
    properties:
      content:
        maxLength: 1000
        minLength: 2
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - content
    - title
    type: object
  main.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        minLength: 2
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        minLength: 2
        type: string
    type: object
  main.UserPayload:
    properties:
      email:
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      username:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.commentPayLoad:
    properties:
      content:
        type: string
      user_id:
        type: integer
    required:
    - content
    - user_id
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Go Social server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GO Social Study App
paths:
  /health:
    get:
      description: get health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health Check
      tags:
      - OPS
  /posts:
    post:
      consumes:
      - application/json
      description: create a new post with title, content and tags
      parameters:
      - description: Post payload
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/main.PostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new post
      tags:
      - POSTS
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: delete post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a post
      tags:
      - POSTS
    get:
      consumes:
      - application/json
      description: get post by ID
      parameters:
      - description: Posts ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Show a post with comments
      tags:
      - POSTS
    patch:
      consumes:
      - application/json
      description: update post by ID with optional title, content and tags
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update post payload
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a post
      tags:
      - POSTS
  /posts/{id}/comments:
    post:
      consumes:
      - application/json
      description: create a new comment on a post by post ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment payload
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/main.commentPayLoad'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Comment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a comment on a post
      tags:
      - COMMENTS
  /users:
    post:
      consumes:
      - application/json
      description: create a new user with username, email and password
      parameters:
      - description: User payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.UserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - USERS
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user
      tags:
      - USERS
  /users/{id}/follow:
    put:
      consumes:
      - application/json
      description: follow user by ID
      parameters:
      - description: Posts ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Follow a user
      tags:
      - USERS
  /users/{id}/unfollow:
    put:
      consumes:
      - application/json
      description: unfollow user by ID
      parameters:
      - description: Posts ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Unfollow a user
      tags:
      - USERS
  /users/feed:
    get:
      consumes:
      - application/json
      description: get paginated feed of posts from followed users
      parameters:
      - default: 10
        description: Limit number of posts
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: desc
        description: Sort order (asc/desc)
        in: query
        name: sort
        type: string
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      - description: Search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user feed
      tags:
      - FEEDS
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
